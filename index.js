// Generated by LiveScript 1.2.0
var x$;
x$ = angular.module('main', []);
x$.controller('main', ['$scope', '$http'].concat(function($scope, $http){
  var pad, liquidHeight, color;
  pad = function(v, len){
    var u;
    len == null && (len = 2);
    u = v + "";
    if (u.length < len) {
      return repeatString$(" ", len - u.length) + u;
    }
    return u;
  };
  liquidHeight = {
    side: d3.scale.linear().domain([0, 100]).range([260, 60]),
    bottom: d3.scale.linear().domain([0, 100]).range([290, 80]),
    top: d3.scale.linear().domain([0, 100]).range([230, 40])
  };
  color = d3.scale.linear().domain([0, 25, 50, 75, 100]).range(['#f03', '#f96', '#ff9', '#9fc', '#0ff']);
  return $http({
    url: 'live.json',
    method: 'GET'
  }).success(function(data){
    var names, res$, k, dates, xAxis, yAxis, i$, len$, n, link, j$, i, d1, d2, p1, p2, nodata, volume, percent, idx, ref$, jdx, delta, remains, obj, results$ = [];
    res$ = [];
    for (k in data) {
      res$.push(k);
    }
    names = res$;
    dates = (function(){
      var results$ = [];
      for (k in data[names[0]]) {
        results$.push(k);
      }
      return results$;
    }()).sort();
    xAxis = d3.scale.ordinal().domain(dates).range((function(){
      var i$, step$, results$ = [];
      for (i$ = 0, step$ = 765 / dates.length; step$ < 0 ? i$ >= 765 : i$ <= 765; i$ += step$) {
        results$.push(i$);
      }
      return results$;
    }()));
    yAxis = d3.scale.linear().domain([0, 100]).range([173, 7]);
    $scope.reservoirs = [];
    for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
      n = names[i$];
      link = [];
      for (j$ = dates.length - 2; j$ >= 0; --j$) {
        i = j$;
        d1 = dates[i];
        d2 = dates[i + 1];
        p1 = data[n][d1].p;
        p2 = data[n][d2].p;
        nodata = p1 === -1 || p2 === -1 ? true : false;
        if (!nodata) {
          link.push([xAxis(d1), xAxis(d2), yAxis(data[n][d1].p), yAxis(data[n][d2].p)]);
        }
      }
      volume = parseInt(data[n][dates[dates.length - 1]].v / 10) / 10;
      percent = parseInt((data[n][dates[dates.length - 1]].p * 10) / 10);
      idx = dates.length - 1;
      ref$ = [-1, -1], p1 = ref$[0], p2 = ref$[1];
      while (p1 === -1) {
        if (!data[n][dates[idx]]) {
          break;
        }
        p1 = data[n][dates[idx]].p;
        idx--;
      }
      jdx = idx - 7;
      while (p2 === -1) {
        if (!data[n][dates[jdx]]) {
          break;
        }
        p2 = data[n][dates[jdx]].p;
        jdx--;
      }
      delta = (p2 - p1) / (idx - jdx + 1);
      if (delta > 0) {
        remains = parseInt(p1 / 7 / delta);
      } else {
        remains = -1;
      }
      obj = {
        name: n,
        side: liquidHeight.side(data[n][dates[dates.length - 1]].p),
        bottom: liquidHeight.bottom(data[n][dates[dates.length - 1]].p),
        top: liquidHeight.top(data[n][dates[dates.length - 1]].p),
        color: color(data[n][dates[dates.length - 1]].p),
        link: link,
        volume: volume,
        percent: percent,
        start: dates[0],
        end: dates[dates.length - 1],
        remains: remains
      };
      results$.push($scope.reservoirs.push(obj));
    }
    return results$;
  });
}));
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}